// This line is required to use the Clerk Elements we import below
'use client';

import * as SignIn from '@clerk/elements/sign-in';
import * as Clerk from "@clerk/elements/common";

/* Here we create a Loading component to display a Spinner and the text “Loading”,
which we'll need in the Continue component */
function Loading() {
    return (
        <div className="d-flex flex-row justify-content-center align-items-center">
            <div className="spinner-border spinner-border-sm" role="status">
                <span className="visually-hidden">Loading...</span>
            </div>
            <span className="ms-2">Loading</span>
        </div>
    );
}

// Here we create a Continue component that displays either the Loading component or the text “Continue” on a button, depending on the value of the “isLoading” parameter
function Continue({ isLoading } : { isLoading: boolean }) {
    return (
        <button className='btn btn-primary col-12 mb-3' disabled={isLoading}>
            {isLoading ? <Loading/> : 'Continue'}
        </button>
    );
}

// Here we create a FieldError component to display or not a given error message
function FieldError({ message } : { message: string }) {
    if(!message)
        return null;
    return (
        <div className="mt-3">{message}</div>
    );
}

// Then, Login is a Client Component
export default function Login() {
    return (
        <>
            {/* The Root element of the SignIn component must include everything we want to customize on our sign in page */}
            <SignIn.Root>

                {/* As its name suggests, this Step element of the SignIn component is used to define a login step.
                In this case, it's the username of the person who wants to sign in.
                This element acts like a <div> tag, which is why Bootstrap classes can be applied to it. */}
                <SignIn.Step name="start" className='d-flex flex-column col-12 col-sm-9 col-md-7 col-lg-5 col-xl-4 p-5'>

                    <h1 className='fs-2 mb-5 text-center text-primary'>Sign in page</h1>

                    {/* This Field element of the Clerk component lets us specify that, 
                    for our first step in the login process, we're going to fill in the person's username.
                    This element acts like a <div> tag too. */}
                    <Clerk.Field name="identifier" className='d-flex flex-column align-items-center'>

                        {/* This Input element of the Clerk component simply acts as an <input> tag. */}
                        <Clerk.Input type='text' placeholder="username" className='form-control mb-3'/>

                        {/* This Action element of the SignIn component allows us to submit our form. */}
                        <SignIn.Action submit asChild>

                            {/* This Loading element of the Clerk component provides us with “isLoading” data, 
                            which has a value of "true" if our application is currently checking the user name entered, 
                            and a value of “false” if not. We're going to use this data in our Continue component. */}
                            <Clerk.Loading>{(isLoading) => <Continue isLoading={isLoading}/>}</Clerk.Loading>

                        </SignIn.Action>

                        {/* The FieldError element of the Clerk component provides us with 
                        a string “message” if an error occurs in the validation of this step.
                        We're going to use this data in our FieldError component.
                        This element acts like a <div> tag too. */}
                        <Clerk.FieldError className='text-danger error-style'>
                            {({ message }) => <FieldError message={message}/>}
                        </Clerk.FieldError>

                    </Clerk.Field>
                </SignIn.Step>

                {/* This Step element of the SignIn component is used to define the step for filling in our user's password.
                If you understood everything I've written above, you'll easily understand the remaining code. */}
                <SignIn.Step name="verifications" className='d-flex flex-column col-12 col-sm-9 col-md-7 col-lg-5 col-xl-4 p-5'>

                    {/* This Strategy element of the SignIn component is used to define password verification. 
                    For example, we can define a second Strategy to check a code that our application has sent to our email address or phone number.
                    For more information, please refer to the official Clerk documentation. */}
                    <SignIn.Strategy name='password'>
                        <h1 className='fs-2 mb-5 text-center text-dark'>Sign in page</h1>
                        <Clerk.Field name="password" className='d-flex flex-column align-items-center'>
                            <Clerk.Input type='password' placeholder="password" className='form-control mb-3'/>
                            <SignIn.Action submit asChild>
                                <Clerk.Loading>{(isLoading) => <Continue isLoading={isLoading}/>}</Clerk.Loading>
                            </SignIn.Action>
                            <Clerk.FieldError className='text-danger error-style'>
                                {({ message }) => <FieldError message={message}/>}
                            </Clerk.FieldError>
                        </Clerk.Field>
                    </SignIn.Strategy>
                    
                </SignIn.Step>

            </SignIn.Root>
        </>
    );
}